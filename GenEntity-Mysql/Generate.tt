<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Manager.ttinclude" #>
<#@ include file="EntityHelper.ttinclude" #>
<#
    // 是否是WCF服务模型
    bool serviceModel = false;
    bool needRepository=true;
    // 数据库连接
    var connectionString = @"Server=47.92.80.220;port=3306;database=tianleclass;charset=utf8;uid=root;password=,W*QKg)dw8Y#";
 
    // 需要解析的数据库
    var database = new List<string> { "tianleclass" };
	//配置默认的名称空间
	var nameSpace="TestNameSpace";
	//实体类名称空间
	var EntityNameSpace="TestEntity";
	//仓储接口名称空间
	var IRepositoryNameSpace="TestRepository.IRepository";
	//仓库名称空间
	var RepositoryNameSpace="TestRepository.Repository";
	//上下文类
	var dbContextType="TestCommonContext";
	//上下文类名称空间
	var DBContext="TestRepository.DbContexts";

    // 文件版权信息
    var copyright = DateTime.Now.Year + " All Rights Reserved";
    var version = Environment.Version;
    var author = "auto generated by T4";
 
    var manager = Manager.Create(Host, GenerationEnvironment);
    var entities = EntityHelper.GetEntities(connectionString, database);
 
    foreach(Entity entity in entities)
    {
        manager.StartNewFile(entity.EntityName + ".cs","entities");
#>
//-----------------------------------------------------------------------
// <copyright file=" <#= entity.EntityName #>.cs" company="xxxx Enterprises">
// * Copyright (C) <#= copyright #>
// * version : <#= version #>
// * author  : <#= author #>
// * FileName: <#= entity.EntityName #>.cs
// * history : Created by T4 <#= DateTime.Now #>
// </copyright>
//-----------------------------------------------------------------------
using System;
<#    if(serviceModel)
    {
#>
using System.Runtime.Serialization;
<#
    }
#>
 
namespace <#= nameSpace #>
{
    /// <summary>
    /// <#= entity.EntityName #> Entity Model
    /// </summary>   
<#    if(serviceModel)
    {
#>
    [DataContract]
<#
    }
#>
    public class <#= entity.EntityName #>
    {
<#
        for(int i = 0; i < entity.Fields.Count; i++)
        {
#>        /// <summary>
        /// <#= entity.Fields[i].Comment #>
        /// </summary>
<#    if(serviceModel)
    {
#>
        [DataMember]
<#
    }
#>
        public <#= entity.Fields[i].Type #> <#= entity.Fields[i].Name #> { get; set; }

<#
        }
#>
    }
}
<#       
        manager.EndBlock();
		if(!needRepository){
			continue;
		}
		manager.StartNewFile("I"+entity.EntityName + "Repository.cs","IRespository");
#>
using System;
using System.Collections.Generic;
using System.Text;
namespace <#= IRepositoryNameSpace #>
{
    public interface I<#= entity.EntityName #>Repository: IRepositoryBase<<#= entity.EntityName #>>
    {
    }
}
<#	manager.EndBlock();
		manager.StartNewFile(entity.EntityName + "Respository.cs","Respository");
#>
using <#= DBContext #>;
using <#= EntityNameSpace #>;
using <#= IRepositoryNameSpace #>;

namespace <#= RepositoryNameSpace #>
{
    public class <#= entity.EntityName #>Repository : RepositoryBase<<#= entity.EntityName #>>, I<#= entity.EntityName #>Repository
    {
        public <#= entity.EntityName #>Repository(<#= dbContextType #> context) : base(context)
        {
        }
    }
}
<#		manager.EndBlock();
    }
	manager.Process(true);
#>