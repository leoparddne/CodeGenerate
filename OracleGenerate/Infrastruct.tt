<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ include file="Manager.ttinclude" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="D:\tool\GenEntity\OracleGenerate\bin\Debug\net6.0-windows\Model.dll" #>
<#@ import namespace="Model" #>
<#@ assembly name="netstandard" #>
<#
    string modelConfigStr=Host.ResolveParameterValue(null, null, "ParameterName");
    InfrastructModel dataConfig=JsonConvert.DeserializeObject<InfrastructModel>(modelConfigStr);;

    string baseNamespaceName=dataConfig.Config.BaseNamespaceName; //基础名称空间
    string entityNamespaceName=dataConfig.Config.EntityNamespaceName; //实体名称空间
    string repositoryNamespaceName=dataConfig.Config.RepositoryNamespaceName; //仓储名称空间
    string iRepositoryNamespaceName=dataConfig.Config.IRepositoryNamespaceName; //仓储接口名称空间
    string serviceNamespaceName=dataConfig.Config.ServiceNamespaceName; //服务名称空间
    string iServiceNameSpaceName=dataConfig.Config.IServiceNameSpaceName; //服务接口名称空间
    string controllerNameSpaceName=dataConfig.Config.ControllerNameSpaceName;//控制器名称空间

    bool isBaseRepository=dataConfig.Config.IsBaseRepository; //是否生成基础仓储模型

    string tableDesc=dataConfig.Config.TableDesc;
    string tableName=dataConfig.Config.TableName; //数据库表名称
    string entityFileName=dataConfig.Config.EntityFileName; //实体基本名称


    string entityName=dataConfig.Config.EntityName; //实体文件名称
    string repositoryName=dataConfig.Config.RepositoryName; //仓储名称
    string iRepositoryName=dataConfig.Config.IRepositoryName; //仓储基类
    string serviceName=dataConfig.Config.ServiceName; //服务名称
    string iServiceName=dataConfig.Config.IServiceName; //服务接口名称
    string controllerName= dataConfig.Config.ControllerName;//控制器名称
    string inDtoName= dataConfig.Config.InDtoName;

    var manager = Manager.Create(Host, GenerationEnvironment);


    manager.StartNewFile(entityName + ".cs","Entities");
#>
using MES.Server.Domain.Entity;
using SqlSugar;

namespace  <#= baseNamespaceName #>.<#= entityNamespaceName #>
{
    /// <summary>
    /// <#= tableDesc #>
    /// </summary>
    [SugarTable("<#= tableName #>")]
    public class <#= entityName #> : CommonEntity
    {

    }
}

<#
    manager.EndBlock();
    manager.StartNewFile(repositoryName + ".cs","Repository");
#>
using System.Collections.Generic;
using MES.Server.Infrastruct.Repository;
using MES.Server.Infrastruct.UnitOfWork;
using MES.Server.Infrastruct.ServiceExtension.Authentication;
using SqlSugar;

namespace <#= baseNamespaceName #>.<#= repositoryNamespaceName #>
{
     /// <summary>
     /// <#= tableDesc #>
     /// </summary>
 <#
    if(isBaseRepository){
 #>
     public class <#= repositoryName #> : BaseRepository<<#= entityName #>>,<#= iRepositoryName #>
 <#
     }
    else{
 #>
     public class <#= repositoryName #> : BaseRepositoryExtension, <#= iRepositoryName #>
 <#
     }
 #>
    {
        public <#= repositoryName #> (IUnitOfWork unitOfWork) : base(unitOfWork)
        {
        }
    }
}



<#
manager.EndBlock();
manager.StartNewFile(iRepositoryName + ".cs","Repository");
#>
using MES.Server.Infrastruct.Repository;

namespace <#= baseNamespaceName #>.<#= iRepositoryNamespaceName #>
{
     /// <summary>
     /// <#= tableDesc #>
     /// </summary>
     <#
    if(isBaseRepository){
     #>
    public interface <#= iRepositoryName #>: IBaseRepository<<#= entityName #>>
    <#
     }
    else{
     #>
    public interface <#= iRepositoryName #>: IBaseRepositoryExtension
    <#
     }
     #>
    {
    }
}

<#
    manager.EndBlock();
    manager.StartNewFile(serviceName + ".cs","Service");
#>
using MES.Server.Infrastruct.ServiceExtension;
using MES.Server.Infrastruct.UnitOfWork;
using MES.Server.Infrastruct.ServiceExtension.Authentication;
using MES.Server.Manufacture.Application.IService.Material;
using MES.Server.Manufacture.Domain.IRepository.SMT;
using <#= baseNamespaceName #>.<#= iRepositoryNamespaceName #>;

namespace <#= baseNamespaceName #>.<#= serviceNamespaceName #>
{
    public class <#= serviceName #> : CommonService<<#= entityName #>>, <#= iServiceName #>
    {
        private readonly IUnitOfWork unitOfWork;
        private IAuthenticationService authenticationService;
        private readonly <#= iRepositoryName #> <#= repositoryName #>;

        public  <#= serviceName #>(IUnitOfWork unitOfWork,IAuthenticationService  authenticationService, <#= iRepositoryName #> <#= repositoryName #>) 
        : base(<#= repositoryName #>,unitOfWork, authenticationService)
        {
            this.unitOfWork=unitOfWork;
            this.authenticationService=authenticationService;
            this.<#= repositoryName #> = <#= repositoryName #>;
        }
    }
}

<#
    manager.EndBlock();
    manager.StartNewFile(iServiceName + ".cs","Service");
#>

namespace <#= baseNamespaceName #>.<#= iServiceNameSpaceName #>
{
    public interface <#= iServiceName #> :ICommonService<<#= entityName #>>
    {
    }
}


<#
    manager.EndBlock();
    manager.StartNewFile(controllerName + ".cs","Controller");
#>

using MES.Common.Toolkit.Helper;
using MES.Server.Domain.Dto.InDto;
using MES.Server.Infrastruct.ServiceExtension.Authentication;
using MES.Server.WMS.Application.IService.Goods;
using MES.Server.WMS.Domain.Dto.InDto.Goods;
using MES.Server.WMS.Domain.Dto.OutDto.Goods;
using MES.Server.WMS.Domain.Entity.Goods;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;

namespace <#= baseNamespaceName #>.<#= controllerNameSpaceName #>
{
    /// <summary>
    /// <#= tableDesc #>
    /// </summary>
    public class <#= controllerName #> : BaseController
    {
        private <#= iServiceName #> <#= serviceName #>;
        private IAuthenticationService authenticationService;

        public <#= controllerName #>(<#= iServiceName #> <#= serviceName #>, IAuthenticationService authenticationService)
        {
            this.<#= serviceName #> = <#= serviceName #>;
            this.authenticationService = authenticationService;
        }

        /// <summary>
        /// /新增
        /// </summary>
        /// <param name="inDto"></param>
        [HttpPost]
        public void Create(<#= entityFileName #>InDto inDto)
        {
            <#= entityName #> <#= entityFileName #> = MapperHelper.AutoMap<<#= inDtoName #>, <#= entityName #>>(inDto);

            <#= entityFileName #>.Create(authenticationService.GetUserNo());

            <#= serviceName #>.Create(<#= entityFileName #>);
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="ids"></param>
        [HttpPost]
        public void Delete(List<string> ids)
        {
            <#= serviceName #>.Delete(ids);
        }

        /// <summary>
        /// 启用、禁用
        /// </summary>
        /// <param name="dto"></param>
        [HttpPost]
        public void SetEnabled(SetListEnabledInDto dto)
        {
            <#= serviceName #>.SetEnabled(dto);
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="inDto"></param>
        [HttpPost]
        public void Update(<#= entityFileName #>InDto inDto)
        {
            //TODO 后续优化逻辑
            var raw = <#= serviceName #>.GetByID(inDto.Id);
            if (raw == null)
            {
                throw new System.Exception("NoData");
            }
            //获取原始对象后更新新的字段
            <#= entityName #> <#= entityName #> = MapperHelper.AutoMap<<#= inDtoName #>, <#= entityName #>>(inDto, raw);
            <#= entityName #>.Update(authenticationService.GetUserNo());

            <#= serviceName #>.Update(<#= entityName #>);
        }

    }
}


<#
manager.EndBlock();
manager.Process(true);
#>
