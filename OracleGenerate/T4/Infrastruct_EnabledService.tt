<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ include file="Manager.ttinclude" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="netstandard" #>
<#

    /*
    //System.Diagnostics.Debugger.Launch();


    string modelConfigStr=Host.ResolveParameterValue(null, null, "ParameterName");
    //modelConfigStr=System.Web.HttpUtility.UrlDecode(modelConfigStr);


    modelConfigStr=modelConfigStr.Replace(@"\\",@"\").Replace("\"","");

    var pathByte=Convert.FromBase64String(modelConfigStr);
    modelConfigStr=System.Text.Encoding.UTF8.GetString(pathByte);

    string json= File.ReadAllText(modelConfigStr);

    InfrastructModel dataConfig=JsonConvert.DeserializeObject<InfrastructModel>(json);
    GenerateEx ex=new GenerateEx();
    
    */

    var entityFieldStr = "";
    var dtoFieldStr = "";

    string baseNamespaceName="MES.Server.Tooling"; //基础名称空间
    string entityNamespaceName="Domain.Entity"; //实体名称空间
    string repositoryNamespaceName="Infrastruct.Repository"; //仓储名称空间
    string iRepositoryNamespaceName="Domain.IRepository"; //仓储接口名称空间
    string serviceNamespaceName="Application.Service"; //服务名称空间
    string iServiceNameSpaceName="Application.IService"; //服务接口名称空间
    string controllerNameSpaceName="Controllers";//控制器名称空间


    string dtoNameSpaceName = baseNamespaceName+".Domain.Dto.InDto";//dto名称空间

    bool isBaseRepository=true; //是否生成基础仓储模型

    string tableDesc= "";//数据库注释
    string tableName= "";//数据库表名称
    string entityFileName=""; //实体基本名称


    string entityName=entityFileName+"Entity"; //实体文件名称
    string repositoryName=entityFileName+"Repository"; //仓储名称
    string iRepositoryName="I"+repositoryName; //仓储基类
    string serviceName=entityFileName+"Service"; //服务名称
    string iServiceName="I"+serviceName; //服务接口名称
    string controllerName= entityFileName+"Controller";//控制器名称
    string inDtoName= entityFileName + "InDto";

    string primaryKeyName="";

    string savePath=""; //保存路径

    var manager = Manager.Create(Host, GenerationEnvironment);


    manager.StartNewFile(entityName + ".cs",savePath + "/WebAPI/Entities");
#>
using MES.Server.Domain.Entity;
using SqlSugar;

namespace  <#= baseNamespaceName #>.<#= entityNamespaceName #>
{
    /// <summary>
    /// <#= tableDesc #>
    /// </summary>
    [SugarTable("<#= tableName #>")]
    public class <#= entityName #> : CommonEntity, IEnabled
    {
        <#=entityFieldStr#>
    }
}

<#
    manager.EndBlock();
    manager.StartNewFile( repositoryName + ".cs",savePath + "/WebAPI/Repository");
#>
using System.Collections.Generic;
using MES.Server.Infrastruct.Repository;
using MES.Server.Infrastruct.UnitOfWork;
using MES.Server.Infrastruct.ServiceExtension.Authentication;
using SqlSugar;

namespace <#= baseNamespaceName #>.<#= repositoryNamespaceName #>
{
     /// <summary>
     /// <#= tableDesc #>
     /// </summary>
 <#
    if(isBaseRepository){
 #>
     public class <#= repositoryName #> : BaseRepository<<#= entityName #>>,<#= iRepositoryName #>
 <#
     }
    else{
 #>
     public class <#= repositoryName #> : BaseRepositoryExtension, <#= iRepositoryName #>
 <#
     }
 #>
    {
        public <#= repositoryName #> (IUnitOfWork unitOfWork) : base(unitOfWork)
        {
        }
    }
}



<#
manager.EndBlock();
manager.StartNewFile( iRepositoryName + ".cs",savePath + "/WebAPI/Repository");
#>
using MES.Server.Infrastruct.Repository;

namespace <#= baseNamespaceName #>.<#= iRepositoryNamespaceName #>
{
     /// <summary>
     /// <#= tableDesc #>
     /// </summary>
     <#
    if(isBaseRepository){
     #>
    public interface <#= iRepositoryName #>: IBaseRepository<<#= entityName #>>
    <#
     }
    else{
     #>
    public interface <#= iRepositoryName #>: IBaseRepositoryExtension
    <#
     }
     #>
    {
    }
}

<#
    manager.EndBlock();
    manager.StartNewFile( serviceName + ".cs",savePath + "/WebAPI/Service");
#>
using MES.Server.Infrastruct.ServiceExtension;
using MES.Server.Infrastruct.UnitOfWork;
using MES.Server.Infrastruct.ServiceExtension.Authentication;
using MES.Server.Manufacture.Application.IService.Material;
using MES.Server.Manufacture.Domain.IRepository.SMT;
using <#= baseNamespaceName #>.<#= iRepositoryNamespaceName #>;

namespace <#= baseNamespaceName #>.<#= serviceNamespaceName #>
{
    public class <#= serviceName #> : BaseService,  <#= iServiceName #>
    {
        private readonly IUnitOfWork unitOfWork;
        private IAuthenticationService authenticationService;
        private readonly <#= iRepositoryName #> repository;

        public  <#= serviceName #>(IUnitOfWork unitOfWork,IAuthenticationService  authenticationService, <#= iRepositoryName #> <#= repositoryName #>) 
        :base(unitOfWork)
        {
            this.unitOfWork=unitOfWork;
            this.authenticationService=authenticationService;
            this.repository = <#= repositoryName #>;
        }

        public void Create(<#= entityName #>  entity)
        {
            //id生成
            entity.<#= primaryKeyName #> = GUIDHelper.NewGuid;
            entity.Create(authenticationService.GetUserNo());
            repository.Insert(entity);
        }

        public void Delete(List<string> ids)
        {
            repository.DeleteByIdList(ids);
        }

        public void Update(<#= entityName #>  entity)
        {
            entity.Update(authenticationService.GetUserNo());
            repository.Update(entity);
        }

        public void Update(List<<#= entityName #>> entity)
        {
            repository.UpdateRange(entity);
        }

        public void SetEnabled(SetListEnabledInDto dto)
        {
            if (dto == null)
            {
                return;
            }

            //根据主键更新
            repository.Update(f => new <#= entityName #>  { IsEnabled = dto.IsEnabled }, f => dto.Ids.Contains(f.<#= primaryKeyName #>));
        }

        /// <summary>
        /// 根据ID获取数据
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public <#= entityName #>  GetByID(string id)
        {
            return repository.QueryById(id);
        }

        /// <summary>
        /// 获取所有启用中的数据
        /// </summary>
        /// <returns></returns>
        public List<<#= entityName #>> GetEnableList()
        {
            return repository.QueryListByCondition(f => f.IsEnabled == StatesEnum.Y.ToString());
        }

        /// <summary>
        /// 获取所有启用中的数据(分页)
        /// </summary>
        /// <returns></returns>
        public PageModel<<#= entityName #>> GetEnablePageList(int pageIndex, int pageSize)
        {
            return repository.QueryPageList(f => f.IsEnabled == StatesEnum.Y.ToString(), f => f.UpdateTime, pageIndex, pageSize, SqlSugar.OrderByType.Desc);
        }
    }
}

<#
    manager.EndBlock();
    manager.StartNewFile( iServiceName + ".cs",savePath + "/WebAPI/Service");
#>

namespace <#= baseNamespaceName #>.<#= iServiceNameSpaceName #>
{
    public interface <#= iServiceName #> :IBaseService
    {
        void Create(<#= entityName #>  entity);
        void Delete(List<string> ids);
        <#= entityName #>  GetByID(string id);
        List<<#= entityName #>> GetEnableList();
        PageModel<<#= entityName #>> GetEnablePageList(int pageIndex, int pageSize);
        void SetEnabled(SetListEnabledInDto dto);
        void Update(<#= entityName #>  entity);
        void Update(List<<#= entityName #> > entity);
    }
}


<#
    manager.EndBlock();
    manager.StartNewFile( controllerName + ".cs",savePath + "/WebAPI/Controller");
#>

using MES.Common.Toolkit.Helper;
using MES.Server.Domain.Dto.InDto;
using MES.Server.Infrastruct.ServiceExtension.Authentication;
using MES.Server.WMS.Application.IService.Goods;
using MES.Server.WMS.Domain.Dto.InDto.Goods;
using MES.Server.WMS.Domain.Dto.OutDto.Goods;
using MES.Server.WMS.Domain.Entity.Goods;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;

namespace <#= baseNamespaceName #>.<#= controllerNameSpaceName #>
{
    /// <summary>
    /// <#= tableDesc #>
    /// </summary>
    public class <#= controllerName #> : BaseController
    {
        private <#= iServiceName #> <#= serviceName #>;
        private IAuthenticationService authenticationService;

        public <#= controllerName #>(<#= iServiceName #> <#= serviceName #>, IAuthenticationService authenticationService)
        {
            this.<#= serviceName #> = <#= serviceName #>;
            this.authenticationService = authenticationService;
        }

        /// <summary>
        /// /新增
        /// </summary>
        /// <param name="inDto"></param>
        [HttpPost]
        public void Create(<#= entityFileName #>InDto inDto)
        {
            <#= entityName #> <#= entityFileName #> = MapperHelper.AutoMap<<#= inDtoName #>, <#= entityName #>>(inDto);

            <#= entityFileName #>.Create(authenticationService.GetUserNo());

            <#= serviceName #>.Create(<#= entityFileName #>);
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="ids"></param>
        [HttpPost]
        public void Delete(List<string> ids)
        {
            <#= serviceName #>.Delete(ids);
        }

        /// <summary>
        /// 启用、禁用
        /// </summary>
        /// <param name="dto"></param>
        [HttpPost]
        public void SetEnabled(SetListEnabledInDto dto)
        {
            <#= serviceName #>.SetEnabled(dto);
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="inDto"></param>
        [HttpPost]
        public void Update(<#= entityFileName #>InDto inDto)
        {
            //TODO 后续优化逻辑
            var raw = <#= serviceName #>.GetByID(inDto.Id);
            if (raw == null)
            {
                throw new System.Exception("NoData");
            }
            //获取原始对象后更新新的字段
            <#= entityName #> <#= entityName #> = MapperHelper.AutoMap<<#= inDtoName #>, <#= entityName #>>(inDto, raw);
            <#= entityName #>.Update(authenticationService.GetUserNo());

            <#= serviceName #>.Update(<#= entityName #>);
        }

    }
}

<#
    manager.EndBlock();
    manager.StartNewFile( entityName + "InDto.cs",savePath + "/WebAPI/Dto/InDto");
#>

using MES.Server.Dashboard.Domain.Dto.InDto.Comm;
using MES.Server.Domain.Attributes;
using System;
using System.ComponentModel.DataAnnotations;

namespace <#= baseNamespaceName #>.<#= dtoNameSpaceName #>
{
    /// <summary>
    /// <#= tableDesc #>
    /// </summary>
    public class <#= entityName #>InDto
    {
        <#= dtoFieldStr #>
    }

}

<#
manager.EndBlock();
manager.Process(true);
#>
